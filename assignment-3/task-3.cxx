/****************************************************************************

–ó–∞–¥–∞—á–∞ –≤ –∫–æ–Ω—Ç–µ—Å—Ç–µ - B.
–ó–∞–¥–∞–Ω –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ, –∫–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±–ª–∞–¥–∞–µ—Ç —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é. –ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã —Å –Ω–æ–º–µ—Ä–æ–º 1 –≤ –≤–µ—Ä—à–∏–Ω—É —Å –Ω–æ–º–µ—Ä–æ–º ùëõ.

*–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ (2 ‚â§ ùëõ ‚â§ 100, 1 ‚â§ ùëö ‚â§ 1000). –°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ —Ç—Ä–∏ —á–∏—Å–ª–∞: –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—à–∏–Ω, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ä–µ–±—Ä–æ –≥—Ä–∞—Ñ–∞ –∏ –µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å. –ü—Ä–æ–ø—É—Å–∫–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç 105.

*–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*
–í –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –≤–µ–ª–∏—á–∏–Ω—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã —Å –Ω–æ–º–µ—Ä–æ–º 1 –≤ –≤–µ—Ä—à–∏–Ω—É —Å –Ω–æ–º–µ—Ä–æ–º n.

| in   |out |
|------|----|
|4 5   | 3  |
|1 2 1 |    |
|1 3 2 |    |
|3 2 1 |    |
|2 4 2 |    |
|3 4 1 |    |

****************************************************************************/

#include <vector>
#include <cassert>
#include <fstream>
#include <iostream>
#include <queue>

/******************************************************************************/

using std::ifstream;
using std::ofstream;
using std::vector;
using std::pair;
using std::make_pair;
using std::min;
using std::queue;

typedef pair<unsigned, unsigned> pair_uu;

const unsigned INFINITY = 2147483647;

/******************************************************************************/

class Graph {
public:
    Graph(unsigned verticesNumber);

    void increaseEdge(unsigned from, unsigned to, int weight);

    // –≤—ã–µ—Ä—à–∏–Ω—ã - –≤–µ–∫—Ç–æ—Ä –ø–∞—Ä <vertex, weight>
    void getRelated(unsigned vertex, vector<pair_uu> &vertices) const;

    unsigned getSize() const;

private:
    unsigned size_;
    vector<vector<unsigned>> matrix_;
};

/******************************************************************************/

// –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
class MaxFlow{
public:
    MaxFlow():
            net_(0){}

    // –í–µ—Ä–Ω—É—Ç—å maxiamal flow
    unsigned operator()(const Graph & graph, unsigned s, unsigned t){
        // Edmonds-Karp algorithm
        // –û—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å–µ—Ç—å
        net_ = graph;
        // –¶–µ–ª–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞
        t_ = t;
        // –î–µ–ª—å—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        unsigned delta = 0;
        // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        unsigned flow = 0;

        // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        do{
            delta = IncreaseFlow(s);
            flow += delta;
        }while(delta != 0);

        return flow;
    }

private:
    // –ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∏ —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å–µ—Ç–∏
    unsigned IncreaseFlow(unsigned s){
        // –î–µ–ª–∞–µ–º pair <parent vertex, weight of edge from parent>
        vector<pair_uu> parents(net_.getSize());
        for(unsigned i = 0; i < net_.getSize(); ++i){
            parents[i].first = INFINITY;
            parents[i].second = INFINITY;
        }
        parents[s].first = s;
        parents[s].second = 0;

        // –ü–æ–∏—Å–∫ –ø—É—Ç–∏  BFS
        queue<unsigned> q;
        q.emplace(s);
        while(!q.empty()){
            unsigned v = q.front();
            q.pop();
            if(v == t_)
                break;
            vector<pair_uu> related;
            net_.getRelated(v, related);
            for(pair_uu & edge : related){
                if(parents[edge.first].first == INFINITY){
                    parents[edge.first].first = v;
                    parents[edge.first].second = edge.second;
                    q.push(edge.first);
                }
            }
        }

        // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ä—à–∏–Ω–∞ –Ω–µ –¥–æ—Å—Ç–∏–∂–∏–º–∞, —Ç–æ –¥–µ–ª—å—Ç–∞ —Ä–∞–≤–Ω–∞ 0
        if(parents[t_].first == INFINITY)
            return 0;

        // –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        unsigned delta = INFINITY;
        unsigned u = t_;
        while(u != s){
            if(parents[u].second < delta)
                delta = parents[u].second;
            u = parents[u].first;
        }

        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å–µ—Ç–∏
        u = t_;
        while(u != s){
            net_.increaseEdge(parents[u].first, u, -delta);
            net_.increaseEdge(u, parents[u].first, delta);
            u = parents[u].first;
        }

        return delta;
    }

    unsigned t_;
    Graph net_;
};

/******************************************************************************/

int main() {
    ifstream fin("maxflow.in");
    ofstream fout("maxflow.out");

    // Initializing graph
    unsigned n = 0;
    unsigned m = 0;
    fin >> n >> m;
    Graph graph(n);
    for(int i = 0; i < m; ++i){
        unsigned v = 0;
        unsigned u = 0;
        unsigned w = 0;
        fin >> v >> u >> w;
        graph.increaseEdge(v - 1, u - 1, w);
    }

    // Counting maximal flow
    MaxFlow maxFlow;
    fout << maxFlow(graph, 0, n - 1) << '\n';

    fin.close();
    fout.close();
}

/****************************GRAPH*********************************************/

Graph::Graph(unsigned int size) :
        size_(size),
        matrix_(size_, vector<unsigned>(size_, 0)) {}



void Graph::increaseEdge(unsigned from, unsigned to, int weight)
{
    assert(static_cast<int>(matrix_[from][to]) + weight >= 0);
    matrix_[from][to] += weight;
}



unsigned Graph::getSize() const
{
    return size_;
}



void Graph::getRelated(unsigned vertex, vector<pair_uu> &vertices) const
{
    vertices.clear();
    for(unsigned i = 0; i < size_; ++i){
        if(matrix_[vertex][i] != 0)
            vertices.push_back(make_pair(i, matrix_[vertex][i]));
    }
}
