/****************************************************************************

–ü–æ–ª–Ω—ã–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ –∑–∞–¥–∞–Ω –º–∞—Ç—Ä–∏—Ü–µ–π —Å–º–µ–∂–Ω–æ—Å—Ç–∏. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π –º–µ–∂–¥—É –µ–≥–æ –≤–µ—Ä—à–∏–Ω–∞–º–∏. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –≥—Ä–∞—Ñ–µ –Ω–µ—Ç —Ü–∏–∫–ª–æ–≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞.

*–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∏—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ùëÅ (1 ‚â§ ùëÅ ‚â§ 100) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –≥—Ä–∞—Ñ–∞. –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëÅ —Å—Ç—Ä–æ–∫–∞—Ö –ø–æ ùëÅ —á–∏—Å–µ–ª –∑–∞–¥–∞–µ—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞ (ùëó-–æ–µ —á–∏—Å–ª–æ –≤ ùëñ-–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –≤–µ—Å —Ä–µ–±—Ä–∞ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã ùëñ –≤ –≤–µ—Ä—à–∏–Ω—É ùëó). –í—Å–µ —á–∏—Å–ª–∞ –ø–æ –º–æ–¥—É–ª—é –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç 100. –ù–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –º–∞—Ç—Ä–∏—Ü—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω—É–ª–∏.

*–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞*
–í—ã–≤–µ–¥–∏—Ç–µ ùëÅ —Å—Ç—Ä–æ–∫ –ø–æ ùëÅ —á–∏—Å–µ–ª ‚Äî –º–∞—Ç—Ä–∏—Ü—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –≤–µ—Ä—à–∏–Ω, –≥–¥–µ ùëó-–æ–µ —á–∏—Å–ª–æ –≤ ùëñ-–æ–π —Å—Ç—Ä–æ–∫–µ —Ä–∞–≤–Ω–æ –≤–µ—Å—É –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –∏–∑ –≤–µ—Ä—à–∏–Ω—ã ùëñ –≤ j.


 |      in    |    out    |
 |------------|-----------|
 |4           | 0 5 7 13  |
 |0 5 9 100   | 12 0 2 8  |
 |100 0 2 8   | 11 16 0 7 |
 |100 100 0 7 | 4 9 11 0  |
 |4 100 100 0 |           |

****************************************************************************/

#include <vector>
#include <fstream>

/******************************************************************************/

using std::vector;
using std::min;

/******************************************************************************/

void floyd(vector<vector<double>> & graph) {
    for (size_t k = 0; k < graph.size(); ++k)
        for (size_t i = 0; i < graph.size(); ++i)
            for (size_t j = 0; j < graph.size(); ++j)
                graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
}

/******************************************************************************/

int main() {
    std::ifstream fin("floyd.in");
    std::ofstream fout("floyd.out");

    unsigned n = 1;
    fin >> n;
    vector<vector<double>> graph(n, vector<double>(n, 0));
    for (size_t i = 0; i < n; ++i)
        for (size_t j = 0; j < n; ++j ){
            double a = 101;
            fin >> a;
            graph[i][j] = a;
        }

    floyd(graph);

    for (size_t i = 0; i < n; ++i ){
        for (size_t j = 0; j < n; ++j)
            fout << graph[i][j] << ' ';
        fout << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}

